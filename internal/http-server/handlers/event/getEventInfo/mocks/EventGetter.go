// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	models "eventBooker/internal/models"

	mock "github.com/stretchr/testify/mock"
)

// EventGetter is an autogenerated mock type for the EventGetter type
type EventGetter struct {
	mock.Mock
}

// GetAllEvents provides a mock function with no fields
func (_m *EventGetter) GetAllEvents() ([]models.Event, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllEvents")
	}

	var r0 []models.Event
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]models.Event, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []models.Event); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetEventWithBookings provides a mock function with given fields: eventID
func (_m *EventGetter) GetEventWithBookings(eventID int) (*models.Event, []models.Booking, error) {
	ret := _m.Called(eventID)

	if len(ret) == 0 {
		panic("no return value specified for GetEventWithBookings")
	}

	var r0 *models.Event
	var r1 []models.Booking
	var r2 error
	if rf, ok := ret.Get(0).(func(int) (*models.Event, []models.Booking, error)); ok {
		return rf(eventID)
	}
	if rf, ok := ret.Get(0).(func(int) *models.Event); ok {
		r0 = rf(eventID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Event)
		}
	}

	if rf, ok := ret.Get(1).(func(int) []models.Booking); ok {
		r1 = rf(eventID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]models.Booking)
		}
	}

	if rf, ok := ret.Get(2).(func(int) error); ok {
		r2 = rf(eventID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// NewEventGetter creates a new instance of EventGetter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventGetter(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventGetter {
	mock := &EventGetter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
